@page "/videofragment/"
@page "/videofragment/{id:int}/{initialId:int}"
@inject IJSRuntime JS

<div style="height:100%;">
    <div class="row" style="padding-bottom:10px;">
        <div class="col-md-2">
            <button @onclick="Back" type="button" class="btn btn-info" style="width:150%">
                Back to Video Fragments List
            </button>
        </div>
        <div class="col-md-10">
            <button @onclick:preventDefault @onclick="@Save" form="form" type="submit" class="btn btn-primary" style="float:right;width:20%;">Save</button>
            @if (model != null && model.Id > 0)

            {
                <button @onclick="@Redirect" class="btn btn-primary" style="float:right;width:30%;margin-right:10px;">dSTORM Coordinates</button>
            }
        </div>
    </div>
    <div class="row" style="height:90%;display:block;">
        @if (model != null)
        {
            <EditForm EditContext="EditContext" id="form" style="">
                <DataAnnotationsValidator />
                <ServerSideErrors @ref="serverError"></ServerSideErrors>
                <fieldset>
                    <div class="validationErrorContainer">
                        <ValidationMessage style="font-size: 15px;;background-color: lightcoral;border-radius: 5px;padding: 5px;margin-bottom: 10px;" For="@(() => model.ServerErrorField)"></ValidationMessage>
                    </div>
                    @if (model != null)
                    {
                        <VideoFragmentDetails @ref="Details" model="@model">

                        </VideoFragmentDetails>
                    }
                </fieldset>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int InitialId { get; set; }
    [CascadingParameter(Name = "MainLayout")]
    private MainLayout Layout { get; set; }
    ServerSideErrors serverError;
    VideoFragmentDetails Details;
    EditContext EditContext;
    public VideoFragmentViewModel model;



    protected override async Task OnInitializedAsync()
    {
        await Layout.ShowLoader();

        if (Id > 0)
        {
            model = await service.GetVideoFragment(Id);

        }
        else
        {
            model = new VideoFragmentViewModel();
            model.InitialVideoId = InitialId;
        }
        EditContext = new EditContext(model);

        Layout.HideLoader();
    }
    private async void Save()// TODO
    {
        await Layout.ShowLoader();
        bool isValid = Validate();
        if (isValid)
        {
            var response = await service.SaveVideoFragment(model);
            if (response.Result == Models.Enums.ResultCode.Success)
            {
                Layout.HideLoader();
                nM.NavigateTo("/videofragment/" + System.Convert.ToInt32(response.Description) + "/" + 0);
            }
            else
            {
                serverError.DisplayError<VideoFragmentViewModel>(response); //TODO
            }
        }
        Layout.HideLoader();

    }



    /*public async Task Delete()
    {
        Layout.ShowLoader();
        var response = await service.DeleteGetPhysicalProperty(model);

        if (response.Result == Models.Enums.ResultCode.Success)
        {
            Layout.HideLoader();

            this.Back();
        }
        else
        {
            serverError.DisplayError<PhysicalPropertyViewModel>(response);

        }
        Layout.HideLoader();

    }*/
    public void Redirect()
    {
        if (model != null && model.Id > 0)
        {
            nM.NavigateTo("/dstorminfos/" + model.Id);
        }
    }
    private async void Back()
    {
        nM.NavigateTo("/videofragments/" + model.InitialVideoId);
    }
    public bool Validate()
    {
        return EditContext.Validate();
    }

}
